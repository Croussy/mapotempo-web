// Copyright Â© Mapotempo, 2013-2014
//
// This file is part of Mapotempo.
//
// Mapotempo is free software. You can redistribute it and/or
// modify since you respect the terms of the GNU Affero General
// Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
// Mapotempo is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the Licenses for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Mapotempo. If not, see:
// <http://www.gnu.org/licenses/agpl.html>
//
function destinations_form(params, api) {

  var destination_id = params.destination_id,
    map_layer_url = params.map_layer_url,
    map_lat = params.map_lat,
    map_lng = params.map_lng,
    map_attribution = params.map_attribution,
    marker_lat = $(":input[name$=\\[lat\\]]").val(),
    marker_lng = $(":input[name$=\\[lng\\]]").val();

  var map = L.map('map').setView([marker_lat || map_lat, marker_lng || map_lng], 13);
  L.tileLayer(map_layer_url, {
    maxZoom: 18,
    attribution: map_attribution
  }).addTo(map);

  // api-web
  var form_popup = L.DomUtil.get('edit-position');
  if (form_popup) {
    form_popup.classList.add('leaflet-bar');
    var control_position = L.Control.extend({
      options: {
          position: 'topright'
      },
      onAdd: function (map) {
          var container = form_popup;
          return container;
      }
    });
    map.addControl(new control_position());
  }

  var markers = {};

  var pointing = false;
  var icon_default = new L.Icon.Default();

  function prepare_display_destination(destination) {
    if (destination.geocoding_accuracy) {
      if (destination.geocoding_accuracy > <%= Mapotempo::Application.config.geocode_geocoder.accuracy_success %>) {
        destination.geocoding_status = 'success';
      } else if (destination.geocoding_accuracy > <%= Mapotempo::Application.config.geocode_geocoder.accuracy_warning %>) {
        destination.geocoding_status = 'warning';
      } else {
        destination.geocoding_status = 'danger';
      }
      destination.geocoding_accuracy_percent = Math.round(destination.geocoding_accuracy * 100);
    }
    return destination;
  }

  function wire(row) {
    var $row = $(row),
      id = $row.attr('data-destination_id');

    <% if Mapotempo::Application.config.geocode_complete %>
    $row.one("focus", ":input[name$=\\[street\\]]", function() {
      $(this).autocomplete({
        delay: 500,
        source: function(req, add) {
          $.ajax({
            type: "patch",
            data: $(":input", $row).serialize(),
            url: '/api/0.1/' + api + '/geocode_complete.json',
            beforeSend: beforeSendWaiting,
            success: function(data) {
              add($.map(data, function(val, i) {
                return {
                  label: val.street + ' ' + val.postalcode + ' ' + val.city + ' ' + val.country,
                  value: val.street
                };
              }));
            },
            complete: completeWaiting,
            error: ajaxError
          });
        },
        select: function(event, ui) {
          event.target.value = ui.item.value;
          $(event.target).trigger('change');
        }
      });
    });
    <% end %>
    $row.on("change", ":input", function(event, move) {
      if (move === undefined && event.currentTarget.name.match(/\[street\]|\[postalcode\]|\[city\]|\[country\]|\[lat\]|\[lng\]$/))
        move = true;
      var url;
      if (event.currentTarget.name.match(/\[street\]|\[postalcode\]|\[city\]|\[country\]$/)) {
        url = '/api/0.1/' + api + '/geocode.json';
      } else {
        if (event.currentTarget.name.match(/\[lat\]|\[lng\]$/)) {
          var latChg = $(":input[id$=_lat]").val(),
              lngChg = $(":input[id$=_lng]").val();
          if (destination_id in markers) {
            markers[destination_id].setLatLng(new L.LatLng(latChg, lngChg));
          } else {
            addMarker(destination_id, latChg, lngChg);
          }
          if (move) {
            if (map.getZoom() != 16 || !map.getBounds().contains(markers[destination_id].getLatLng())) {
              map.setView(markers[destination_id].getLatLng(), 16);
            }
          }
          displayGeocoding(0, null, 'point');
        }
        return;
      }
      confirmGeocode({
        type: "patch",
        data: $(":input", $row),
        url: url,
        beforeSend: beforeSendWaiting,
        success: function(data) {
          update(id, data, move);
        },
        complete: completeWaiting,
        error: ajaxError
      });
    })
    .on("click", ".pointing + span", function(event) {
      pointing = id;
      $('body').css('cursor', 'crosshair');
      $('.leaflet-container').css('cursor', 'crosshair');
    });

    $('a.pointing').click(function(event) {
      pointing = id;
      $('body').css('cursor', 'crosshair');
      $('.leaflet-container').css('cursor', 'crosshair');
    });

    var formatNoMatches = I18n.t('web.select2.empty_result');
    $('select[name$=\\[tag_ids\\]\\[\\]]', $row).select2({
      theme: 'bootstrap',
      minimumResultsForSearch: -1,
      templateSelection: templateTag,
      templateResult: templateTag,
      formatNoMatches: function() {
        return formatNoMatches;
      },
      width: '100%'
    });

    $('#destination_take_over').timeEntry({
      show24Hours: true,
      showSeconds: true,
      initialField: 1,
      defaultTime: new Date(0, 0, 0, 0, 0, 0),
      spinnerImage: ''
    });

    $('#destination_open, #destination_close').timeEntry({
      show24Hours: true,
      spinnerImage: ''
    });
  }

  function confirmGeocode(ajaxParams) {
    if ($('[name$=\\[geocoding_level\\]]').val() == 'point') {
      if (confirm(I18n.t('destinations.form.dialog.confirm_overwrite_point'))) {
        $.ajax(ajaxParams);
      }
    }
    else
      $.ajax(ajaxParams);
  }

  function displayGeocoding(accuracy_percent, status, level) {
    $('#geocoding_fail').hide();
    if (accuracy_percent != 0 && status) {
      $('#geocoding_accuracy').show();
      var progress = $('.progress div');
      progress.css('width', accuracy_percent + '%');
      progress.removeClass('progress-bar-success progress-bar-warning progress-bar-danger');
      progress.addClass('progress-bar-' + status);
      $('.progress div span').html(accuracy_percent + '%');
    }
    else
      $('#geocoding_accuracy').hide();
    $('[name$=\\[geocoding_accuracy\\]]').val(accuracy_percent / 100);
    if (level == 'point')
      $('#no_geocoding_accuracy').show();
    else
      $('#no_geocoding_accuracy').hide();
    $('#geocoding_level').show();
    $('[name$=\\[geocoding_level\\]]').val(level);
    $('.geocoding-level').hide();
    $('#geocoding-level-' + level).show();
    $('#geocoding-level-value').html(I18n.t('destinations.form.geocoding_level.' + level));
  }

  function update(destination_id, destination, move) {
    var row = $('[data-destination_id=' + destination_id + ']');
    $('[name$=\\[name\\]]', row).val(destination.name);
    $('[name$=\\[street\\]]', row).val(destination.street);
    $('[name$=\\[postalcode\\]]', row).val(destination.postalcode);
    $('[name$=\\[city\\]]', row).val(destination.city);
    $('[name$=\\[country\\]]', row).val(destination.country);
    $('[name$=\\[lat\\]]', row).val(destination.lat);
    $('[name$=\\[lng\\]]', row).val(destination.lng);
    if ($.isNumeric(destination.lat) && $.isNumeric(destination.lng)) {
      if (destination_id in markers) {
        markers[destination_id].setLatLng(new L.LatLng(destination.lat, destination.lng));
      } else {
        addMarker(destination_id, destination.lat, destination.lng);
      }
      if (move) {
        if (map.getZoom() != 16 || !map.getBounds().contains(markers[destination_id].getLatLng())) {
          map.setView(markers[destination_id].getLatLng(), 16);
        }
      }
    }
    if (destination.street || destination.postalcode || destination.city) {
      if (destination.geocoding_accuracy) {
        destination = prepare_display_destination(destination);
        displayGeocoding(destination.geocoding_accuracy_percent, destination.geocoding_status, destination.geocoding_level);
      } else {
        $('#no_geocoding_accuracy').hide();
        $('#geocoding_accuracy').hide();
        $('[name$=\\[geocoding_accuracy\\]]').val(null);
        $('#geocoding_level').hide();
        $('[name$=\\[geocoding_level\\]]', row).val(null);
        $('#geocoding_fail').show();
      }
    }
    else {
      $('#no_geocoding_accuracy').show();
      $('#geocoding_accuracy').hide();
      $('[name$=\\[geocoding_accuracy\\]]').val(null);
      $('#geocoding_fail').hide();
      $('#geocoding_level').hide();
      $('[name$=\\[geocoding_level\\]]', row).val(null);
    }
  }

  function markerChange(id, latLng) {
    var row = $('[data-destination_id=' + id + ']');
    displayGeocoding(0, null, 'point');
    $('[name$=\\[lat\\]]', row).val(latLng.lat);
    $('[name$=\\[lng\\]]', row).val(latLng.lng).trigger('change', false);
  }

  map.on('click', function(mouseEvent) {
    if (pointing !== false) {
      if (pointing in markers) {
        markers[pointing].setLatLng(mouseEvent.latlng);
      } else {
        addMarker(pointing, mouseEvent.latlng.lat, mouseEvent.latlng.lng);
      }
      markerChange(pointing, mouseEvent.latlng);
      pointing = false;
      $('body, .leaflet-container').css('cursor', '');
    }
  });

  wire($("form"));

  function addMarker(id, lat, lng) {
    var marker = L.marker(new L.LatLng(lat, lng), {
      icon: icon_default,
      draggable: true,
      destination: id
    }).addTo(map);
    marker.on('dragend', function(event) {
      markerChange(event.target.options.destination, event.target.getLatLng());
    });
    markers[id] = marker;
  }

  if ($.isNumeric(marker_lat) && $.isNumeric(marker_lng)) {
    addMarker(destination_id, marker_lat, marker_lng);
  }
}

function destinations_new(params, api) {
  destinations_form(params, api);
}

function destinations_edit(params, api) {
  destinations_form(params, api);
}

Paloma.controller('Destination').prototype.new = function() {
  destinations_new(this.params, 'destinations');
};

Paloma.controller('Destination').prototype.create = function() {
  destinations_new(this.params, 'destinations');
};

Paloma.controller('Destination').prototype.edit = function() {
  destinations_edit(this.params, 'destinations');
};

Paloma.controller('Destination').prototype.update = function() {
  destinations_edit(this.params, 'destinations');
};

Paloma.controller('Store').prototype.new = function() {
  destinations_new(this.params, 'stores');
};

Paloma.controller('Store').prototype.create = function() {
  destinations_new(this.params, 'stores');
};

Paloma.controller('Store').prototype.edit = function() {
  destinations_edit(this.params, 'stores');
};

Paloma.controller('Store').prototype.update = function() {
  destinations_edit(this.params);
};

function destinations_import(params) {
  $("#dialog-upload").dialog({
    autoOpen: false,
    modal: true
  });

  $(":file").filestyle({
    buttonName: "btn-primary",
    iconName: "fa fa-folder-open",
    buttonText: I18n.t('web.choose_file')
  });

  $("form").submit(function() {
    if ($('#destinations_import_replace').is(':checked') && !confirm(I18n.t('destinations.import.replace_confirm'))) {
      return false;
    }
    $("#dialog-upload").dialog("open");
  });
}

Paloma.controller('Destination').prototype.import = function() {
  destinations_import(this.params);
};

Paloma.controller('Destination').prototype.upload = function() {
  destinations_import(this.params);
};

Paloma.controller('Store').prototype.import = function() {
  destinations_import(this.params);
};

Paloma.controller('Store').prototype.upload = function() {
  destinations_import(this.params);
};

function destinations_index(params, api) {

  var map_layer_url = params.map_layer_url,
    map_lat = params.map_lat,
    map_lng = params.map_lng,
    map_attribution = params.map_attribution,
    default_city = params.default_city,
    default_country = params.default_country,
    take_over_default = params.take_over_default;

  var map = L.map('map').setView([map_lat, map_lng], 13);
  L.tileLayer(map_layer_url, {
    maxZoom: 18,
    attribution: map_attribution
  }).addTo(map);

  var markers = {};
  var markersLayers = L.featureGroup();

  var cluster = new L.MarkerClusterGroup({
    showCoverageOnHover: false
  });
  map.addLayer(cluster);

  map.on('zoomend', function(e) {
    if (map.getZoom() > 14) {
      map.removeLayer(cluster);
      map.addLayer(markersLayers);
    } else {
      map.removeLayer(markersLayers);
      map.addLayer(cluster);
    }
  });

  var tags = {};
  var pointing = false;
  var icon_default = new L.Icon.Default();
  var icon_over = new L.Icon.Default({
    iconUrl: '/images/marker-FFBB00.svg'
  });
  var icon_over_stack = [];

  function prepare_display_destination(destination) {
    var t = [];
    $.each(tags, function(i, tag) {
      t.push({
        id: tag.id,
        label: tag.label,
        color: tag.color ? tag.color.substr(1) : undefined,
        icon: tag.icon,
        active: $.inArray(tag.id, destination.tag_ids) >= 0
      });
    });
    destination.tags = t;
    destination.i18n = mustache_i18n;
    if (destination.geocoding_accuracy) {
      if (destination.geocoding_accuracy > <%= Mapotempo::Application.config.geocode_geocoder.accuracy_success %>) {
        destination.geocoding_status = 'success';
      } else if (destination.geocoding_accuracy > <%= Mapotempo::Application.config.geocode_geocoder.accuracy_warning %>) {
        destination.geocoding_status = 'warning';
      } else {
        destination.geocoding_status = 'danger';
      }
      destination.geocoding_accuracy_percent = Math.round(destination.geocoding_accuracy * 100);
    }
    if (destination.geocoding_level) {
      destination['geocoding_level_' + destination.geocoding_level] = true;
      destination['geocoding_level_title'] = I18n.t('destinations.index.geocoding_level') + ' : ' + I18n.t('destinations.form.geocoding_level.' + destination.geocoding_level);
    }
    if (destination.lat === null || destination.lng === null) {
      destination.has_no_position = I18n.t('destinations.index.no_position');
    }
    if (destination.open) {
      destination.open = destination.open.split(':').slice(0, 2).join(':');
    }
    if (destination.close) {
      destination.close = destination.close.split(':').slice(0, 2).join(':');
    }
    destination.default_country = default_country;
    destination.take_over_default = take_over_default;
    return destination;
  }

  function wire(row) {
    var $row = $(row),
      id = $row.attr('data-destination_id');

    <% if Mapotempo::Application.config.geocode_complete %>
    $row.one("focus", ":input[name$=\\[street\\]]", function() {
      $(this).autocomplete({
        delay: 500,
        source: function(req, add) {
          $.ajax({
            type: "patch",
            data: $(":input", $row).serialize(),
            url: '/api/0.1/' + api + '/geocode_complete.json',
            beforeSend: beforeSendWaiting,
            success: function(data) {
              add($.map(data, function(val, i) {
                return {
                  label: val.street + ' ' + val.postalcode + ' ' + val.city + ' ' + val.country,
                  value: val.street
                };
              }));
            },
            complete: completeWaiting,
            error: ajaxError
          });
        },
        select: function(event, ui) {
          event.target.value = ui.item.value;
          $(event.target).trigger('change');
        }
      });
    });
    <% end %>
    $row.on("change", ":input:not(:checkbox)", function(event, move) {
      if (move === undefined && event.currentTarget.name.match(/\[street\]|\[postalcode\]|\[city\]|\[country\]|\[lat\]|\[lng\]$/))
        move = true;
      var url = '/api/0.1/' + api + '/' + id + '.json';
      confirmGeocode({
        type: "put",
        data: $(":input", $row),
        url: url,
        beforeSend: beforeSendWaiting,
        success: function(data) {
          update(id, data, move);
        },
        complete: completeWaiting,
        error: ajaxError
      }, row, event.currentTarget.name.match(/\[street\]|\[postalcode\]|\[city\]|\[country\]$/) && $('[name$=\\[geocoding_level\\]]', row).val() == 'point');
    })
    .on("click", ".pointing + span", function(event) {
      pointing = id;
      $('body').css('cursor', 'crosshair');
      $('.leaflet-container').css('cursor', 'crosshair');
    })
    .click(function(event) {
      over(id, true);
    })
    .on("click", ".destroy", function(event) {
      if (confirm(I18n.t('all.verb.destroy_confirm'))) {
        $.ajax({
          type: "delete",
          url: '/api/0.1/' + api + '/' + id + '.json',
          beforeSend: beforeSendWaiting,
          success: function(data) {
            row.remove();
            markersLayers.removeLayer(markers[id]);
            cluster.removeLayer(markers[id]);
            delete markers[id];
            count_dec();
          },
          complete: completeWaiting,
          error: ajaxError
        });
      }
    });

    var formatNoMatches = I18n.t('web.select2.empty_result');
    fake_select2($('select[name$=\\[tag_ids\\]\\[\\]]', $row), function(select) {
      select.select2({
        theme: 'bootstrap',
        minimumResultsForSearch: -1,
        templateSelection: templateTag,
        templateResult: templateTag,
        formatNoMatches: function() {
          return formatNoMatches;
        },
        width: '100%'
      });
      select.next('.select2-container--bootstrap').addClass('input-sm');
    });
  }

  function confirmGeocode(ajaxParams, row, conf) {
    if (conf) {
      if (confirm(I18n.t('destinations.form.dialog.confirm_overwrite_point'))) {
        $('[name$=\\[lat\\]]', row).val(null);
        $('[name$=\\[lng\\]]', row).val(null);
      }
    }
    $.ajax(ajaxParams);
  }

  function update(destination_id, destination, move) {
    var row = $('[data-destination_id=' + destination_id + ']'),
      destination = prepare_display_destination(destination);
    $(row).replaceWith(SMT['destinations/show'](destination));
    row = $('[data-destination_id=' + destination_id + ']');
    wire(row);
    $('.destinations').trigger('update');

    if ($.isNumeric(destination.lat) && $.isNumeric(destination.lng)) {
      if (destination_id in markers) {
        markers[destination_id].setLatLng(new L.LatLng(destination.lat, destination.lng));
      } else {
        addMarker(destination_id, destination.lat, destination.lng);
      }
      if (move) {
        if (map.getZoom() != 16 || !map.getBounds().contains(markers[destination_id].getLatLng())) {
          map.setView(markers[destination_id].getLatLng(), 16);
        }
      }
    } else {
      delete markers[destination_id];
    }
  }

  function count() {
    var n = $('.destinations tr:visible').length;
    $("#count").html(n);
  }

  function count_inc() {
    $("#count").html(parseInt($("#count").text()) + 1);
  }

  function count_dec() {
    $("#count").html(parseInt($("#count").text()) - 1);
  }

  function markerChange(id, latLng) {
    var row = $('[data-destination_id=' + id + ']');
    $('[name$=\\[geocoding_level\\]]', row).val('point');
    $('[name$=\\[lat\\]]', row).val(latLng.lat);
    $('[name$=\\[lng\\]]', row).val(latLng.lng).trigger('change', false);
  }

  map.on('click', function(mouseEvent) {
    if (pointing !== false) {
      if (pointing in markers) {
        markers[pointing].setLatLng(mouseEvent.latlng);
      } else {
        addMarker(pointing, mouseEvent.latlng.lat, mouseEvent.latlng.lng);
      }
      markerChange(pointing, mouseEvent.latlng);
      pointing = false;
      $('body, .leaflet-container').css('cursor', '');
    }
  });

  function over(id, move) {
    if (icon_over_stack.indexOf(id) != -1)
      move = false;

    // clean over
    $('.destination').removeClass('highlight');
    var i;
    while (i = icon_over_stack.pop()) {
      if (i in markers) {
        markers[i].setIcon(icon_default);
      }
    }

    // new over
    if (id in markers) {
      if (move) {
        if (map.getZoom() != 16 || !map.getBounds().contains(markers[id].getLatLng())) {
          map.setView(markers[id].getLatLng(), 16);
        }
      }
      markers[id].setIcon(icon_over);
      icon_over_stack.push(id);
    }
    var row = $('[data-destination_id=' + id + ']');
    row.addClass('highlight');
    if (row.position().top < $("#destination_box").scrollTop() || row.position().top > $("#destination_box").scrollTop() + $("#destination_box").height()) {
      $("#destination_box").animate({
        scrollTop: row.position().top - 100
      });
    }
  }

  function addMarker(id, lat, lng) {
    var marker = L.marker(new L.LatLng(lat, lng), {
      icon: icon_default,
      draggable: true,
      destination: id
    }).addTo(markersLayers).addTo(cluster);
    marker.on('dragend', function(event) {
      markerChange(event.target.options.destination, event.target.getLatLng());
    });
    marker.on('click', function(mouseEvent) {
      if (!pointing) {
        over(mouseEvent.target.options.destination, false);
      }
    });
    markers[id] = marker;
  }

  $("#add").click(function(event) {
    var id = 0;
    var center = map.getCenter();
    var destination = {
      id: id,
      name: I18n.t('destinations.index.default_name'),
      city: default_city,
      default_country: default_country,
      lat: center.lat,
      lng: center.lng,
      take_over_default: take_over_default
    };
    $.ajax({
      type: "post",
      data: JSON.stringify(destination),
      contentType: 'application/json',
      url: '/api/0.1/destinations.json',
      beforeSend: beforeSendWaiting,
      success: function(data) {
        update(data.id, data, true);
        destination.i18n = mustache_i18n;
        $(".destinations").append(SMT['destinations/show'](data));
        wire($('[data-destination_id=' + data.id + ']'));
        over(data.id, true);
        count_inc();
      },
      complete: completeWaiting,
      error: ajaxError
    });
  });

  function filter_text(exactText, normalizedValue, filter, index) {
    return !!String(normalizedValue).match(new RegExp(filter, 'i'));
  }

  function filter_number(exactText, normalizedValue, filter, index) {
    return normalizedValue == filter;
  }

  function display_destinations(data) {
    if ($("#dialog-geocoding").size() == 0) {
      return; // Avoid render and loop with turbolink when page is over
    }
    if (!progress_dialog(data.geocoding, $("#dialog-geocoding"), display_destinations, '/destinations.json')) {
      return;
    }

    var table = $('.destinations');
    $.each(data.tags, function(i, tag) {
      tags[tag.id] = tag;
    });
    $.each(data.destinations, function(i, destination) {
      destination = prepare_display_destination(destination);
      $(table).append(SMT['destinations/show'](destination));
      if ($.isNumeric(destination.lat) && $.isNumeric(destination.lng)) {
        addMarker(destination.id, destination.lat, destination.lng);
      }
    });

    if (markersLayers.getLayers().length > 0) {
      map.fitBounds(markersLayers.getBounds());
    }

    count();

    $('tr', table).each(function(index, element) {
      wire(element);
    });

    $('#destination_box table').on('tablesorter-initialized', function() {
      var
        $table = $(this),
        c = this.config,
        wo = c && c.widgetOptions,
        // include sticky header checkbox; if installed
        $sticky = c && wo.$sticky || '',
        doChecky = function(c, col) {
          $table
            .children('tbody')
            .children('tr:visible')
            .children('td:nth-child( ' + (parseInt(col, 10) + 1) + ' )')
            .find('input[type=checkbox]')
            .each(function() {
              this.checked = c;
              $(this).trigger('change');
            });
        };

      $table
        .children('tbody')
        .on('change', 'input[type=checkbox]', function() {
          // ignore change if updating all rows
          if ($table[0].ignoreChange) {
            return;
          }
          var col, $this = $(this);
          // uncheck header if any checkboxes are unchecked
          if (!this.checked) {
            $table.add($sticky).find('thead input[type=checkbox]').prop('checked', false);
          }
        })
        .end()
        .add($sticky)
        .find('thead input[type=checkbox]')
        // Click on checkbox in table header to toggle all inputs
        .on('change', function() {
          // prevent updateCell for every cell
          $table[0].ignoreChange = true;
          var c = this.checked,
            col = $(this).closest('th').attr('data-column');
          doChecky(c, col);
          // update main & sticky header
          $table.add($sticky).find('th[data-column=' + col + '] input[type=checkbox]').prop('checked', c);
          // update all at once
          $table[0].ignoreChange = false;
        })
        .on('mouseup', function() {
          return false;
        });
    });

    var tableOptions = {
      headers: {
        0: {
          sorter: false
        },
        5: {
          sorter: "digit"
        },
        6: {
          sorter: false
        },
        7: {
          sorter: false
        },
        8: {
          sorter: false
        },
        9: {
          sorter: false
        },
        10: {
          sorter: "digit"
        },
        11: {
          sorter: false
        }
      },
      textExtraction: function(node, table, cellIndex) {
        if (cellIndex == 8) {
          return $.map($("[name$=\\[tag_ids\\]\\[\\]] :selected", node), function(e, i) {
            return e.text;
          }).join(",");
        } else {
          return $.map($(":input", node), function(e, i) {
            return e.value;
          }).join(",");
        }
      },
      theme: "bootstrap",
      // show an indeterminate timer icon in the header when the table is sorted or filtered.
      showProcessing: true,
      // Show order icon v and ^
      headerTemplate: '{content} {icon}',
      widgets: ["uitheme", "filter", "columnSelector"],
      widgetOptions: {
        scroller_height: 220,
        // scroll tbody to top after sorting
        scroller_upAfterSort: true,
        // pop table header into view while scrolling up the page
        scroller_jumpToHeader: true,
        // In tablesorter v2.19.0 the scroll bar width is auto-detected
        // add a value here to override the auto-detected setting
        scroller_barWidth: null,
        filter_childRows: true,
        // class name applied to filter row and each input
        filter_cssFilter: "tablesorter-filter",
        filter_placeholder: {search: I18n.t('web.placeholder_filter')},
        filter_functions: {
          1: filter_text,
          2: filter_text,
          3: filter_text,
          4: filter_text,
          5: filter_number,
          6: filter_text,
          7: function(e, n, f, i, $r) {
            n = n.split(',');
            n[0] = n[0].split(':');
            n[0] = new Date(2000, 1, 1, n[0][0], n[0][1]);
            n[1] = n[1].split(':');
            n[1] = new Date(2000, 1, 1, n[1][0], n[1][1]);

            f = f.split(' - ');
            f[0] = new Date(2000, 1, 1, f[0]);
            f[1] = new Date(2000, 1, 1, f[1]);

            return (isNaN(n[0].getTime()) || f[0] <= n[0]) && (isNaN(n[0].getTime()) || n[1] <= f[1]);
          },
          8: filter_text,
          9: filter_text
        },
        filter_formatter: {
          7: function($cell, indx) {
            return $.tablesorter.filterFormatter.uiRange($cell, indx, {
              values: [0, 24],
              min: 0,
              max: 24,
              delayed: false,
              valueToHeader: false
            });
          },
          10: function($cell, indx) {
            return false;
          },
          11: function($cell, indx) {
            return false;
          }
        },
        columnSelector_container: $('#columnSelector'),
        columnSelector_name: 'data-selector-name',
        columnSelector_priority: 'data-priority',
        columnSelector_layout: '<li role="presentation"><label><input type="checkbox">{name}</label></li>',
        columnSelector_columns: {
          0: 'disable',
          2: 'disable',
          3: 'disable',
          11: 'disable'
        }
      }
    };
    $("#destination_box table").tablesorter(tableOptions).bind('filterEnd', function(e, filter) {
      count();

      markersLayers.clearLayers();
      cluster.clearLayers();
      $('.destinations tr:visible').each(function(i, e) {
        var marker = markers[$(e).attr('data-destination_id')];
        if (marker) {
          markersLayers.addLayer(marker);
          cluster.addLayer(marker);
        }
      });
    });
    $(".tablesorter-filter").addClass("form-control input-sm"); // filter_cssFilter not support setting multiple class at once

    $("#multiple-delete").on("click", function(event) {
      if (confirm(I18n.t('all.verb.destroy_confirm'))) {
        var destination_ids = $.map($('table tbody :checkbox:checked').closest('tr'), function(val, i) {
          return $(val).data('destination_id');
        });

        $.ajax({
          type: "delete",
          url: '/api/0.1/' + api + '.json?' + $.param({ids: destination_ids.join()}),
          beforeSend: beforeSendWaiting,
          success: function(data) {
            $.map($('table tbody :checkbox:checked').closest('tr'), function(row, i) {
              var row = $(row)
              var id = row.data('destination_id');
              row.remove();
              markersLayers.removeLayer(markers[id]);
              cluster.removeLayer(markers[id]);
              delete markers[id];
              count_dec();
            });
          },
          complete: completeWaiting,
          error: ajaxError
        });
      }
    });
  }

  $.ajax({
    url: '/destinations.json',
    beforeSend: beforeSendWaiting,
    success: display_destinations,
    complete: completeWaiting,
    error: ajaxError
  });

  $("#dialog-geocoding").dialog({
    autoOpen: false,
    modal: true
  });
}

Paloma.controller('Destination').prototype.index = function() {
  destinations_index(this.params, 'destinations');
};
